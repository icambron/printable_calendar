#!/usr/bin/env ruby
require "bundler/setup"
require "slop"
require "active_support/core_ext/hash/slice"

require_relative "../lib/printable_calendar"

def load_config_file(file)
  if File.exist?(file)
    JSON.parse(File.read(file), symbolize_names: true)
  else
    abort("Couldn't find config file #{file}")
  end
end

opts = Slop.parse do |o|
  o.bool "-g", "--generate", "generate a token"
  o.bool "-h", "--help", "print help"
  o.bool "-v", "--version", "print version info"
  o.string "-c", "--config", "use a JSON config file"
  o.string "--client-id", "Google client id"
  o.string "--client-secret", "Google client secret"
  o.string "--refresh-token", "Google refresh token"
  o.string "--period", "time period to use"
  o.string "--title", "title for this calendar"
  o.string "--starting-from", "date to start showing. Defaults to today. YYYY-MM-DD"
  o.array "--calendar-ids", "Google calendar IDs"
end

settings = opts[:config] ? load_config_file(opts[:config]) : {}
settings = settings.merge(opts.to_hash.except(:generate, :config, :calendar_ids).compact)
settings[:calendar_ids] = opts[:calendar_ids] unless opts[:calendar_ids].empty?
settings[:starting_from] = settings[:starting_from] ? Date.iso8601(settings[:starting_from]) : nil

printable = PrintableCalendar::PrintableCalendar.new(settings)

case
  when opts[:help] then puts opts
  when opts[:generate] then printable.generate_auth
  when opts[:version] then puts PrintableCalendar::VERSION
  else printable.run
end
